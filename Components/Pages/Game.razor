@page "/getgames"
@using Microsoft.JSInterop
@using UsersLogin.Models
@inject HttpClient _http
@inject IJSRuntime JS
@inject NavigationManager nav

@rendermode InteractiveServer



<PageTitle>Games List</PageTitle>

<h3 class="text-center mb-4">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°</h3>

<div class="mb-3 text-end">
    <button class="btn btn-success mb-3" @onclick="GoToPostgame">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà</button>
    
</div>

<!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏° -->
<div class="table-responsive">
    <table class="table table-bordered table-striped">
        <thead class="table-dark text-center">
            <tr>
                <th>‡∏£‡∏´‡∏±‡∏™</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°</th>
                <th>‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°</th>
                <th>‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤</th>
                <th>‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°</th>
            </tr>
        </thead>
        <tbody>
            @if (games != null && games.Count > 0)
            {
                @foreach (var g in games)
                {
                    <tr>
                        <td class="text-center">@g.Id</td>
                        <td>@g.Title</td>
                        <td>@g.Platform</td>
                        <td>@g.Developer</td>
                        <td>@g.Publisher</td>
                        <td>@(g.OrderDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                        <td>@g.CreatedAt.ToString("yyyy-MM-dd")</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-warning me-1" @onclick="() => ShowModalEdit(g.Id)">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(g.Id)">‡∏•‡∏ö</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="8" class="text-center">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°</td></tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° -->
@if (showModal)
{
    <div class="modal show d-block" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-2" @bind="gameDto.Title" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°" />
                    <input class="form-control mb-2" @bind="gameDto.Platform" placeholder="‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°" />
                    <input class="form-control mb-2" @bind="gameDto.Developer" placeholder="‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤" />
                    <input class="form-control mb-2" @bind="gameDto.Publisher" placeholder="‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢" />
                    <input class="form-control mb-2" type="date" @bind="gameDto.OrderDate" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="Add">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button class="btn btn-secondary" @onclick="HideModal">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Å‡∏° -->
@if (showModalEdit)
{
    <div class="modal show d-block" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°</h5>
                    <button type="button" class="btn-close" @onclick="HideModalEdit"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-2" @bind="gameEditDto.Title" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°" />
                    <input class="form-control mb-2" @bind="gameEditDto.Platform" placeholder="‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°" />
                    <input class="form-control mb-2" @bind="gameEditDto.Developer" placeholder="‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤" />
                    <input class="form-control mb-2" @bind="gameEditDto.Publisher" placeholder="‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢" />
                    <input class="form-control mb-2" type="date" @bind="gameEditDto.OrderDate" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="Update">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button class="btn btn-secondary" @onclick="HideModalEdit">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<GamesDto>? games = new();
    private GamesDto gameDto { get; set; } = new();
    private GamesDto gameEditDto { get; set; } = new();
    private bool showModal = false;
    private bool showModalEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        games = await _http.GetFromJsonAsync<List<GamesDto>>("api/games");
    }

    private void ShowModal()
    {
        gameDto = new();
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    private async Task Add()
    {
        gameDto.CreatedAt = DateTime.Now;
        var response = await _http.PostAsJsonAsync("api/games", gameDto);
        if (response.IsSuccessStatusCode)
        {
            HideModal();
            await LoadData();
        }
    }

    private async Task ShowModalEdit(int id)
    {
        gameEditDto = await _http.GetFromJsonAsync<GamesDto>($"api/games/{id}");
        showModalEdit = true;
    }

    private void HideModalEdit()
    {
        showModalEdit = false;
    }

    private async Task Update()
    {
        var response = await _http.PutAsJsonAsync($"api/games/{gameEditDto.Id}", gameEditDto);
        if (response.IsSuccessStatusCode)
        {
            HideModalEdit();
            await LoadData();
        }
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö?");
        if (confirmed)
        {
            await Delete(id);
        }
    }

    private async Task Delete(int id)
    {
        var response = await _http.DeleteAsync($"api/games/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
    }

    @* private void GoToPostgame()
    {
        try
        {
            Console.WriteLine("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /postgame");
            nav.NavigateTo("/postgame", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error navigating to /postgame: {ex.Message}");
        }
    } *@
    private void GoToPostgame()
    {
        nav.NavigateTo("/postgame");
    }
}