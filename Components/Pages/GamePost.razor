@page "/postgame"
@using UsersLogin.Models
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@inject NavigationManager navManager

<PageTitle>Game Add</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">üéÆ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà</h3>
        <button class="btn btn-success" @onclick="GoToGamesList">
            üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        </button>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow rounded-3">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="Title" class="form-label">‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏° *</label>
                        <InputText id="Title" class="form-control" @bind-Value="games.Title" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° *</label>
                        <select @bind="games.Platform" class="form-control">
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°</option>
                            <option value="PC">PC</option>
                            <option value="PlayStation 5">PlayStation 5</option>
                            <option value="PlayStation 4">PlayStation 4</option>
                            <option value="Xbox Series X/S">Xbox Series X/S</option>
                            <option value="Xbox One">Xbox One</option>
                            <option value="Nintendo Switch">Nintendo Switch</option>
                            <option value="Mobile">Mobile</option>
                            <option value="VR">VR</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤ *</label>
                        <InputText class="form-control" @bind-Value="games.Developer" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ *</label>
                        <InputText class="form-control" @bind-Value="games.Publisher" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</label>
                        <InputDate class="form-control" @bind-Value="games.OrderDate" />
                    </div>

                    <div class="text-center mt-4">
                        <button class="btn btn-primary w-100"
                                style="background-color: #4fa69b; border-color: #4fa69b;"
                                @onclick="HandleValidSubmit"
                                disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...</span>
                                
                            }
                            else
                            {
                                <span>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                            }
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(responseMessage))
                    {
                        <div class="mt-3 alert @(isSuccess ? "alert-success" : "alert-danger")">
                            @responseMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private GamesDto games = new GamesDto();
    private string? responseMessage;
    private bool isSubmitting = false;
    private bool isSuccess = false;
    private HttpClient Http => HttpClientFactory.CreateClient("BackEndGame");

    protected override void OnInitialized()
    {
        games = new GamesDto
        {
            CreatedAt = DateTime.Now,
            OrderDate = DateTime.Now
        };
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(games.Title) ||
            string.IsNullOrWhiteSpace(games.Platform) ||
            string.IsNullOrWhiteSpace(games.Developer) ||
            string.IsNullOrWhiteSpace(games.Publisher))
        {
            responseMessage = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô";
            isSuccess = false;
            return;
        }

        isSubmitting = true;
        responseMessage = "";

        try
        {
            games.CreatedAt = DateTime.Now;
            var response = await Http.PostAsJsonAsync("api/games", games);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å...";
                isSuccess = true;
                await Task.Delay(2000);
                navManager.NavigateTo("/getgames");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                responseMessage = $"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.StatusCode} - {error}";
                isSuccess = false;
            }
        }
        catch
        {
            responseMessage = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ";
            isSuccess = false;
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoToGamesList()
    {
        navManager.NavigateTo("/getgames");
    }
}
