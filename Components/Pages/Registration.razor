@page "/register"
@layout EmptyLayout
@using UsersLogin.Models;
@using UsersLogin.PanelService;
@inject NavigationManager navManager
@rendermode InteractiveServer
@inject AdminPanelService adminPanelService;

<div class="container mt-5" style="max-width: 450px;">
    <h3 class="text-center mb-4">üìù Register</h3>

    <form @onsubmit="HandleRegistration">
        <div class="form-group mb-3">
            <label>Name:</label>
            <input type="text" class="form-control" @bind="registrationModel.Name" required />
        </div>

        <div class="form-group mb-3">
            <label>Email:</label>
            <input type="email" class="form-control" @bind="registrationModel.Email" required />
        </div>

        <div class="form-group mb-4">
            <label>Password:</label>
            <input type="password" class="form-control" @bind="registrationModel.Password" required />
        </div>

        <button type="submit" class="btn btn-success w-100">Register</button>

        @if (!string.IsNullOrEmpty(alertMessage))
        {
            <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">
                @alertMessage
            </div>
        }

        <p class="mt-4 text-center">
            Already have an account? <a href="/login">Login</a>
        </p>
    </form>
</div>

@code {
    private RegistrationModel registrationModel = new();
    private string alertMessage;
    private bool isSuccess;

    private async Task HandleRegistration()
    {
        var RegistrationResponse = await adminPanelService.Register(registrationModel);
        alertMessage = RegistrationResponse.Message;
        isSuccess = RegistrationResponse.Success;

        if (isSuccess)
        {
            registrationModel = new RegistrationModel(); // Clear form
            await Task.Delay(1500); // Wait before redirect
            navManager.NavigateTo("/login");
        }
    }
}
